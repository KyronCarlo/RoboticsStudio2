function robotCollectCubes3D(numShapes, workspaceSize)
    % Simulate cube collection while avoiding obstacles with a 0.5 clearance.
    clf; hold on; axis equal;
    xlim([0 workspaceSize]); ylim([0 workspaceSize]); zlim([0 1]); % Flat table
    title('3D Pick and Place Simulation'); xlabel('X'); ylabel('Y'); zlabel('Z');
    view(3); grid on;

    % Define possible colors and shapes
    colors = {'r', 'b', 'g', 'k', 'm', 'c', 'y'};
    shapes = {'cube', 'sphere', 'pyramid'};

    % Generate random positions, colors, and shapes
    shapePositions = [workspaceSize * rand(numShapes, 2), zeros(numShapes, 1)];
    shapeTypes = shapes(randi(length(shapes), numShapes, 1));
    shapeColors = colors(randi(length(colors), numShapes, 1));

    % Ensure same number of rows in shape data
    numShapes = size(shapePositions, 1);
    shapeData = table(shapePositions, shapeTypes(:), shapeColors(:), ...
                      'VariableNames', {'Position', 'Type', 'Color'});

    % Plot all shapes
    for i = 1:numShapes
        color = shapeData.Color{i};
        pos = shapeData.Position(i, :);
        switch shapeData.Type{i}
            case 'cube'
                drawCube(pos, color);
            case 'sphere'
                drawSphere(pos, color);
            case 'pyramid'
                drawPyramid(pos, color);
        end
    end

    % Initial robot position
    robotPos = [workspaceSize/2, workspaceSize/2, 0];
    hRobot = plot3(robotPos(1), robotPos(2), robotPos(3), 'ks', 'MarkerSize', 10, 'MarkerFaceColor', 'k');

    % Identify pickable cubes
    pickableCubes = shapeData.Position(strcmp(shapeData.Type, 'cube') & ismember(shapeData.Color, {'r', 'b', 'g'}), :);

    % Pick cubes while avoiding obstacles
    while ~isempty(pickableCubes)
        % Find the nearest cube
        distances = vecnorm(pickableCubes - robotPos, 2, 2);
        [~, idx] = min(distances);
        nextCube = pickableCubes(idx, :);

        % Plan a path avoiding obstacles with a 0.5 clearance
        path = planPathAvoidObstacles(robotPos, nextCube, shapeData, 0.5);
        for j = 1:size(path, 1)
            animateRobotMove3D(hRobot, robotPos, path(j, :));
            robotPos = path(j, :);
        end

        % Remove collected cube
        pickableCubes(idx, :) = [];
        pause(0.5);
    end
end

%% Helper Functions
function drawCube(position, color)
    [X, Y, Z] = ndgrid([-0.5 0.5], [-0.5 0.5], [-0.5 0.5]);
    X = X(:) + position(1);
    Y = Y(:) + position(2);
    Z = Z(:) + position(3);
    K = convhull(X, Y, Z);
    trisurf(K, X, Y, Z, 'FaceColor', color, 'EdgeColor', 'k');
end

function drawSphere(position, color)
    [X, Y, Z] = sphere(10);
    X = X * 0.5 + position(1);
    Y = Y * 0.5 + position(2);
    Z = Z * 0.5 + position(3);
    surf(X, Y, Z, 'FaceColor', color, 'EdgeColor', 'none');
end

function drawPyramid(position, color)
    V = [0 0 1; -0.5 -0.5 0; 0.5 -0.5 0; 0.5 0.5 0; -0.5 0.5 0];
    V = V + position;
    F = [1 2 3; 1 3 4; 1 4 5; 1 5 2; 2 3 4; 2 4 5];
    patch('Vertices', V, 'Faces', F, 'FaceColor', color, 'EdgeColor', 'k');
end

function animateRobotMove3D(hRobot, startPos, endPos)
    steps = 20;
    for t = linspace(0, 1, steps)
        newPos = (1 - t) * startPos + t * endPos;
        set(hRobot, 'XData', newPos(1), 'YData', newPos(2), 'ZData', newPos(3));
        pause(0.05);
    end
end

function path = planPathAvoidObstacles(startPos, targetPos, shapeData, clearance)
    stepSize = 0.5;
    direction = targetPos - startPos;
    direction = direction / norm(direction);
    numSteps = round(norm(targetPos - startPos) / stepSize);
    path = zeros(numSteps, 3);

    for i = 1:numSteps
        nextStep = startPos + i * stepSize * direction;
        
        for j = 1:height(shapeData)
            obstaclePos = shapeData.Position(j, :);
            if norm(nextStep - obstaclePos) < clearance
                % Detour if too close
                detourDir = [-direction(2), direction(1), 0]; % Simple sidestep
                nextStep = nextStep + clearance * detourDir;
                break;
            end
        end
        
        path(i, :) = nextStep;
    end
    path = [path; targetPos];
end
